#include<stdio.h>
#include<stdbool.h>
struct Tower_
{
    size_t element[100],n;
};
typedef struct Tower_ Tower;
void display(Tower T)
{
    for(int i=0; i<T.n; ++i)
        printf("\t%u",T.element[i]);
}
bool is_Underflow(Tower t)
{
    if(t.n==0)
        return true;
    return false; 
}
size_t pop(Tower *t)
{
    --(t->n);
    return t->element[t->n];
}
void push(Tower *t,size_t a)
{
    ++(t->n);
    t->element[(t->n)-1] = a;
}

bool can_move(Tower *k1,Tower *k2)
{
    if(is_Underflow(*k1))
        return false;
    if(is_Underflow(*k2))
        return true;
    size_t d1 = pop(k1), d2 = pop(k2);
    push(k1,d1);
    push(k2,d2);
    if(d1<d2)
        return true;
    else
        return false;
}

void move(Tower *k1,Tower *k2)
{
    push(k2,pop(k1));
}

int main()
{
    size_t n=1,iterate=0;
    printf("\n\nEnter number of disk:");
    scanf("%u",&n);
    Tower A,B,C;
    A.n = 0;
    B.n = 0;
    C.n = 0;
//Creating first tower
    for(int i=n; i>0; --i)
        push(&A,i);
    while(!is_Underflow(A) || !is_Underflow(B))
    {
        if(iterate%2==0)
            if(can_move(&A,&B))
                move(&A,&B);
            else 
                if(can_move(&B,&A))
                    move(&B,&A);            
        else
            if(can_move(&C,&B))
                move(&C,&B);
            else
                if(can_move(&B,&C))
                    move(&B,&C);
        ++iterate;
    }
    printf("\nA\t");
    display(A);
    printf("\nB\t");
    display(B);
    printf("\nC\t");
    display(C);
    printf("\n\nSuccess.\nNumber of iteration:%u",iterate);
    return 0;
}